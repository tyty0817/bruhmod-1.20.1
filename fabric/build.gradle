plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.layered {
		officialMojangMappings()

		parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${minecraft_version}"

	modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")

	// Patchouli
//	modImplementation "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}-FABRIC"

	// Trinkets
//	modImplementation "dev.emi:trinkets:${trinkets_version}"

	modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"

	// RUNTIME ONLY
	modRuntimeOnly("com.terraformersmc:modmenu:${modmenu_version}")
	modRuntimeOnly("maven.modrinth:lithium:${lithium_version}")
	modRuntimeOnly("maven.modrinth:sodium:${sodium_version}")
	modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

}

loom {

	def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
	if (aw.exists()) {
		accessWidenerPath.set(aw)
	}
	mixin {
		defaultRefmapName.set("${mod_id}.refmap.json")
	}
	runs {
		client {
			client()
			setConfigName('Fabric Client')
			ideConfigGenerated(true)
			runDir('runs/client')
		}
		server {
			server()
			setConfigName('Fabric Server')
			ideConfigGenerated(true)
			runDir('runs/server')
		}

		datagen {
			server()
			setConfigName('Fabric Datagen')
			ideConfigGenerated(true)
			runDir('runs/server')
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.modid=${mod_id}"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
		}

	}

}

repositories {
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven { url "https://maven.shedaniel.me" }

	// Modrinth plugin for runtime only mods
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}